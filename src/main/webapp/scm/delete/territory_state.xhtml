<ui:composition xmlns="http://www.w3.org/1999/xhtml" xmlns:h="http://xmlns.jcp.org/jsf/html" xmlns:f="http://xmlns.jcp.org/jsf/core"  xmlns:ui="http://xmlns.jcp.org/jsf/facelets" xmlns:p="http://primefaces.org/ui" xmlns:c="http://xmlns.jcp.org/jsp/jstl/core" xmlns:o="http://omnifaces.org/ui"  >      
  #{territoryStateView.switchTerritoryState(main, viewType)}

 <ui:decorate template="/WEB-INF/resources/theme1/pageBasic.xhtml">
    <ui:param name="label" value="#{lang.territoryState}" />
    <ui:param name="ids" value="territoryState" />

    <ui:define name="deleteList" >
      <p:commandButton action="#{territoryStateView.deleteTerritoryState(main)}" value="#{lang.btnYes}" oncomplete="wdgOff('territoryStateWidgetDelConf')" process="f1" update="f1" >
	    <f:setPropertyActionListener target="#{main.pageData.search}" value="#{true}" />
      </p:commandButton>
    </ui:define>

    <ui:define name="menu1" >
      <p:menuitem actionListener="#{territoryStateView.cloneTerritoryState(main)}" value="#{lang.clone}" process="f1" update="f1" onclick="toTop()" icon="fa fa-clone" iconPos="left"/>
    </ui:define>

    <ui:define name="deleteForm" >
      <p:commandButton action="#{territoryStateView.deleteTerritoryState(main)}" value="#{lang.delete}" onclick="wdgOff('territoryStateWidgetDel')" partialSubmit="true" process="@this" update="f1" title="#{lang.delete}" icon="ui-icon-delete" />
    </ui:define>

    <ui:define name="save" >
      <h:commandButton action="#{territoryStateView.saveTerritoryState(main)}" value="#{lang.save}" onclick="toTop()" styleClass="btn btn-primary"><f:ajax execute="f1" render="f1"  /></h:commandButton>     
    </ui:define>   

    <ui:define name="form">
	<!-- Small list combo -->
  <!--	<p:outputLabel value="#{lang.territoryStateTerritoryId}" for="territoryStateTerritoryId" /><h:panelGroup>
         <p:selectOneMenu value="#{territoryStateView.territoryState.territoryId}"  required="true" requiredMessage="#{lang.territoryStateTerritoryId} #{lang.isRequired}" id="territoryStateTerritoryId" converter="omnifaces.SelectItemsConverter">
          <f:selectItem itemLabel="#{lang.noSelection}" itemValue="#{null}" />
          <f:selectItems value="#{scmLookupView.territory(main)}" var="e" itemValue="#{e}" itemLabel="#{e.territoryName}" />
        </p:selectOneMenu><p:message for="territoryStateTerritoryId" display="text" /></h:panelGroup>	-->
	<!-- Small list autocomplete -->
	<!--  <p:outputLabel value="#{lang.territoryStateTerritoryId}" for="territoryStateTerritoryId" /><h:panelGroup>
          <p:autoComplete value="#{territoryStateView.territoryState.territoryId}" completeMethod="#{scmLookupView.territoryAuto}"  required="true" requiredMessage="#{lang.territoryStateTerritoryId} #{lang.isRequired}" id="territoryStateTerritoryId" var="e" itemValue="#{e}" itemLabel="#{e.territoryName}" emptyMessage="#{lang.noResult}" dropdown="true" cache="true" queryDelay="500" maxResults="30" converterMessage="#{lang.invalidSelection}" autocomplete="off" forceSelection="true"  styleClass="fw" >
          <o:converter list="#{scmLookupView.territory(main)}" converterId="omnifaces.ListConverter"  />
        </p:autoComplete><p:message for="territoryStateTerritoryId" display="text" /></h:panelGroup> 	-->
	<!-- Big list autocomplete -->
        <p:outputLabel value="#{lang.territoryStateTerritoryId}" for="territoryStateTerritoryId"/><h:panelGroup>
          <p:autoComplete value="#{territoryStateView.territoryState.territoryId}" completeMethod="#{territoryStateView.territoryAuto}" converter="wawo.LookupIntConverter"   required="true" requiredMessage="#{lang.territoryStateTerritoryId} #{lang.isRequired}" id="territoryStateTerritoryId" var="e" itemValue="#{e}" itemLabel="#{e.territoryName}" emptyMessage="#{lang.noResult}" dropdown="true" cache="true" queryDelay="500" maxResults="30" converterMessage="#{lang.invalidSelection}" autocomplete="off" forceSelection="true"  styleClass="fw" >
            <f:attribute name="clazz" value="#{scmLookupView.territoryClass()}"/>
          <f:attribute name="byid" value="#{scmLookupView.territoryById()}"/>
        </p:autoComplete><p:message for="territoryStateTerritoryId" display="text" /></h:panelGroup>
	<!-- Small list combo -->
  <!--	<p:outputLabel value="#{lang.territoryStateStateId}" for="territoryStateStateId" /><h:panelGroup>
         <p:selectOneMenu value="#{territoryStateView.territoryState.stateId}"  required="true" requiredMessage="#{lang.territoryStateStateId} #{lang.isRequired}" id="territoryStateStateId" converter="omnifaces.SelectItemsConverter">
          <f:selectItem itemLabel="#{lang.noSelection}" itemValue="#{null}" />
          <f:selectItems value="#{scmLookupView.state(main)}" var="e" itemValue="#{e}" itemLabel="#{e.stateName}" />
        </p:selectOneMenu><p:message for="territoryStateStateId" display="text" /></h:panelGroup>	-->
	<!-- Small list autocomplete -->
	<!--  <p:outputLabel value="#{lang.territoryStateStateId}" for="territoryStateStateId" /><h:panelGroup>
          <p:autoComplete value="#{territoryStateView.territoryState.stateId}" completeMethod="#{scmLookupView.stateAuto}"  required="true" requiredMessage="#{lang.territoryStateStateId} #{lang.isRequired}" id="territoryStateStateId" var="e" itemValue="#{e}" itemLabel="#{e.stateName}" emptyMessage="#{lang.noResult}" dropdown="true" cache="true" queryDelay="500" maxResults="30" converterMessage="#{lang.invalidSelection}" autocomplete="off" forceSelection="true"  styleClass="fw" >
          <o:converter list="#{scmLookupView.state(main)}" converterId="omnifaces.ListConverter"  />
        </p:autoComplete><p:message for="territoryStateStateId" display="text" /></h:panelGroup> 	-->
	<!-- Big list autocomplete -->
        <p:outputLabel value="#{lang.territoryStateStateId}" for="territoryStateStateId"/><h:panelGroup>
          <p:autoComplete value="#{territoryStateView.territoryState.stateId}" completeMethod="#{territoryStateView.stateAuto}" converter="wawo.LookupIntConverter"   required="true" requiredMessage="#{lang.territoryStateStateId} #{lang.isRequired}" id="territoryStateStateId" var="e" itemValue="#{e}" itemLabel="#{e.stateName}" emptyMessage="#{lang.noResult}" dropdown="true" cache="true" queryDelay="500" maxResults="30" converterMessage="#{lang.invalidSelection}" autocomplete="off" forceSelection="true"  styleClass="fw" >
            <f:attribute name="clazz" value="#{scmLookupView.stateClass()}"/>
          <f:attribute name="byid" value="#{scmLookupView.stateById()}"/>
        </p:autoComplete><p:message for="territoryStateStateId" display="text" /></h:panelGroup>
    </ui:define>
	
    <ui:define name="list">
      <p:dataTable id="territoryStateTable" var="territoryStateVar" widgetVar="territoryStateWidget" tableStyleClass="mDataTable mDataTable-center fw editLinks"
        lazy="true" value="#{territoryStateView.territoryStateLazyModel}" rows="#{main.pageData.pageSize}" rowKey="#{territoryStateVar.id}"
        rowsPerPageTemplate="#{main.pageData.pageSize},50,100,200" paginator="true" paginatorTemplate="{FirstPageLink} {PreviousPageLink} {PageLinks} {NextPageLink} {LastPageLink} &lt;span class='p-x-5'&gt;  &lt;/span&gt; #{lang.rowsPerPage} {RowsPerPageDropdown} &lt;span class='R p-y-10 p-x-5'&gt; #{lang.showing} {CurrentPageReport} #{lang.outof} #{main.pageData.totalRecords} #{lang.entries} &lt;/span&gt; "
        selection="#{territoryStateView.territoryStateSelected}" rowSelectMode="checkbox" rowHover="true" reflow="false" draggableColumns="true" paginatorAlwaysVisible="true" paginatorPosition="bottom"  scrollable="false" >
        <p:column selectionMode="multiple" exportable="false" />
        <p:column headerText="#{lang.id}" sortBy="#{territoryStateVar.id}" field="id" >
          <p:commandLink action="#{main.setViewType(editform)}" value="#{territoryStateVar.id}" process="@this" update="f1" immediate="true" onstart="block()" oncomplete="unblock()" title="#{lang.editMe}">
        <f:setPropertyActionListener target="#{territoryStateView.territoryState}" value="#{territoryStateVar}" />
          </p:commandLink>
        </p:column>
        <p:column headerText="#{lang.territoryName}" sortBy="#{territoryStateVar.territoryId.territoryName}" field="territory_id.territory_name"><h:outputText value="#{appView.display(territoryStateVar.territoryId.territoryName)}" title="#{appView.title(territoryStateVar.territoryId.territoryName)}" escape="false" /></p:column>
        <p:column headerText="#{lang.stateName}" sortBy="#{territoryStateVar.stateId.stateName}" field="state_id.state_name"><h:outputText value="#{appView.display(territoryStateVar.stateId.stateName)}" title="#{appView.title(territoryStateVar.stateId.stateName)}" escape="false" /></p:column>
      </p:dataTable> 	
    </ui:define>   
  </ui:decorate>
</ui:composition>
